stage ('Build and Package' ) {
//begin common code 
if (fileExists()) {
  def readcounter =    readFile(file: 'version.txt')
  readcounter = readcounter.toInteger() +1
  def version= "Version" + readcounter
  println(version)
  bat 'mvn package -Dartifactversion=' + "${version}"
  writeFile(file: 'version.txt', text:readcounter.toString())
} //if condition
else {
currentBuild.result = "FAILURE" 
  } //else condition
//end common code
  echo "Build and Package Completed" 
} 

mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion} versions:commit
parsedVersion.nextMajorVersion
parsedVersion.nextMinorVersion
parsedVersion.nextIncrementalVersion


tags = {
    Name  = "Terraform-${count.index + 1}"
    
    
    def nextVersionFromGit(scope) {
    def latestVersion = sh(returnStdout: true, script: 'git describe --tags --abbrev=0 --match ..* 2> /dev/null || echo 0.0.0').trim()
    def (major, minor, patch) = latestVersion.tokenize('.').collect { it.toInteger() }
    def nextVersion
    switch (scope) {
        case 'major':
            nextVersion = "${major + 1}.0.0"
            break
        case 'minor':
            nextVersion = "${major}.${minor + 1}.0"
            break
        case 'patch':
            nextVersion = "${major}.${minor}.${patch + 1}"
            break
    }
    nextVersion
}
